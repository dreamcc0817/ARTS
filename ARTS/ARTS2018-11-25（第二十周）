# Algorithm
#####  <br>
将数组元素循环右移k个位置

```
public static void moveArrayElement(int[] array, int k) {
		int length = array.length;
		// 右移newk + n * length个位置，和右移newk个位置效果是一样的
		int newk = k % length;
		int temp = 0;
		for(int i = 0; i < newk; i++) {
			temp = array[length - 1];
			for(int j = length - 2; j >= 0; j--) {
				array[j+1]=array[j];
			}
			array[0]=temp;
		}
	}
```

# Review

文章标题：Guys, REST APIs are not Databases<br>
文章来源：https://medium.com/@marinithiago/guys-rest-apis-are-not-databases-60db4e1120e4<br>

点评：开发人员在使用REST api时经常犯的一个错误是将它们视为数据库。他们不是!访问任何web框架文档，您都会遇到一种将ORM模型的数据库CRUD操作与REST API端点映射的神奇方法。每个CRUD字母变成HTTP动词<br>
我是第一个承认这些操作自然地相互匹配的人，这证明了将它们组合起来是合理的。但是，当开发人员开始将REST api与数据库概念关联起来，而忽略了REST的全部意义时，问题就出现了。数据库的目的是存储数据，而api则是关于组件之间如何交互的。另一个问题是，如果围绕数据库概念构建API，随着时间的推移，它很可能变得含糊不清，难以维护，因为这是数据库模式的自然情况，它们会得到越来越通用和含糊的。<br>
REST意味着具象状态转移。您可以从字面上理解它，这意味着当您进行REST时，您将通过某种协议传输某些东西的状态(HTTP是常见的选择)。使其状态转移的“某物”也称为“资源”。而“状态”就像是资源的快照。资源可以直接映射到ORM模型吗?当然可以!但是这个“资源”可能是很多东西，不仅仅是ORM模型。例如，一些资源通常是只读的数据编译。<br>
将REST api与数据库概念分离的一个有趣的思维游戏是想象如何为时间资源创建端点。当然，数据库中不需要存在时间。您可以使用GET读取当前时间，也可以使用POST通过在其他日期中添加天数来创建未来的日期。就这样，没有数据库。<br>
假设每个用户以非常不同的方式使用一个API。例如，一个运输公司有一个API，其中包含一个运输资源。你认为买方、卖方或承运人会以同样的方式看待货物吗?绝对不是!这些用户拥有发货资源的视图，需要对API执行不同的操作。买方希望支付并跟踪装运。另一方面，卖方只担心库存和运输速度过快。承运商关心的是包裹的尺寸和重量以及它的目的地，所以它去了。如果您将此API构建为针对这三个用户的一应俱全的解决方案，那么您最终将得到一个含糊不清的、过度扩展的API，它将难以演进、难以维护，并且将公开比它应该公开的更多的数据。在这种情况下，您应该构建三个专门的api，每个api对应一个用户上下文。由于数据级的高度耦合，这三个api应该位于同一个项目中，大多数现代web框架支持子域或前缀路由，实现它应该不是问题。这听起来可能工作量太大，但随着时间的推移，它会有回报的。上下文的另一种选择是在API上实现权限或某种访问控制，在我看来，我对这种方法有些谨慎，因为它增加了不必要的复杂性。<br>
如果一个API有太多的用户，使得它不可能有上下文，那么正确的做法是接受这个现实并接受它，但是要尽力帮助API用户。例如，您可以使用诸如GraphQL之类的技术来增强用户对API的要求和获取的能力，这个小控件可以带来很大的不同。但是我的API太小了，不要把事情搞得太复杂!好的，大小和范围之间有直接关系。API越小，它的作用域就越小，这是显而易见的。因此，如果API太小，它将是模糊的和通用的，并且不需要上下文，您可以保持它的简单性，并将CRUD操作映射到REST端点。但是请密切关注它是如何发展的，如果您发现自己使用条件和其他类型的补丁填充API代码，请考虑上述方法。<br>
以上是翻译原文，看到最后我还是不知道我Rest风格的API该怎么写。有些地方他的的确确是和数据库的语句一样的。Rest表达了用户的动作，在数据库中不就应该做相关的动作吗？
# Tip
linux命令：ps -ef|gref 程序<br>
检查程序是否运行

# Share
证书主要的文件类型和协议有: PEM、DER、PFX、JKS、KDB、CER、KEY、CSR、CRT、CRL 、OCSP、SCEP等。



      一、编码格式

X.509 - 这是一种证书标准,主要定义了证书中应该包含哪些内容.其详情可以参考RFC5280,SSL使用的就是这种证书标准.

目前有以下两种编码格式.

1、PEM - Privacy Enhanced Mail,打开看文本格式,以"-----BEGIN..."开头, "-----END..."结尾,内容是BASE64编码.
查看PEM格式证书的信息:openssl x509 -in certificate.pem -text -noout
Apache和NGINX服务器偏向于使用这种编码格式.

     PEM – Openssl使用 PEM(Privacy Enhanced Mail)格式来存放各种信息,它是 openssl 默认采用的信息存放方式。Openssl 中的 PEM 文件一般包含如下信息:

内容类型:表明本文件存放的是什么信息内容,它的形式为“——-BEGIN XXXX ——”,与结尾的“——END XXXX——”对应。

头信息:表明数据是如果被处理后存放,openssl 中用的最多的是加密信息,比如加密算法以及初始化向量 iv。

信息体:为 BASE64 编码的数据。可以包括所有私钥（RSA 和 DSA）、公钥（RSA 和 DSA）和 (x509) 证书。它存储用 Base64 编码的 DER 格式数据，用 ascii 报头包围，因此适合系统之间的文本模式传输。

使用PEM格式存储的证书：
—–BEGIN CERTIFICATE—–
MIICJjCCAdCgAwIBAgIBITANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCVVMx
………
1p8h5vkHVbMu1frD1UgGnPlOO/K7Ig/KrsU=
—–END CERTIFICATE—–

使用PEM格式存储的私钥：
—–BEGIN RSA PRIVATE KEY—–
MIICJjCCAdCgAwIBAgIBITANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCVVMx
………
1p8h5vkHVbMu1frD1UgGnPlOO/K7Ig/KrsU=
—–END RSA PRIVATE KEY—–

使用PEM格式存储的证书请求文件：
—–BEGIN CERTIFICATE REQUEST—–
MIICJjCCAdCgAwIBAgIBITANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCVVMx
………
1p8h5vkHVbMu1frD1UgGnPlOO/K7Ig/KrsU=
—–END CERTIFICATE REQUEST—–

2、DER – 辨别编码规则 (DER) 可包含所有私钥、公钥和证书。它是大多数浏览器的缺省格式，并按 ASN1 DER 格式存储。它是无报头的 － PEM 是用文本报头包围的 DER。

     DER - Distinguished Encoding Rules,打开看是二进制格式,不可读.
查看DER格式证书的信息:openssl x509 -in certificate.der -inform der -text -noout
Java和Windows服务器偏向于使用这种编码格式.

证书编码的转换
PEM转为DER openssl x509 -in cert.crt -outform der -out cert.der

DER转为PEM openssl x509 -in cert.crt -inform der -outform pem -out cert.pem

(提示:要转换KEY文件也类似,只不过把x509换成rsa,要转CSR的话,把x509换成req...)

       二、相关的文件扩展名
这是比较误导人的地方,虽然我们已经知道有PEM和DER这两种编码格式,但文件扩展名并不一定就叫"PEM"或者"DER",常见的扩展名除了PEM和DER还有以下这些,它们除了编码格式可能不同之外,内容也有差别,但大多数都能相互转换编码格式.

CRT - CRT应该是certificate的三个字母,其实还是证书的意思,常见于*NIX系统,有可能是PEM编码,也有可能是DER编码,大多数应该是PEM编码,相信你已经知道怎么辨别.

CER - 还是certificate,还是证书,常见于Windows系统,同样的,可能是PEM编码,也可能是DER编码,大多数应该是DER编码.证书中没有私钥，DER 编码二进制格式的证书文件

KEY - 通常用来存放一个公钥或者私钥,并非X.509证书,编码同样的,可能是PEM,也可能是DER.
查看KEY的办法:openssl rsa -in mykey.key -text -noout
如果是DER格式的话,同理应该这样了:openssl rsa -in mykey.key -text -noout -inform der

CSR - Certificate Signing Request,即证书签名请求,这个并不是证书,而是向权威证书颁发机构获得签名证书的申请,其核心内容是一个公钥(当然还附带了一些别的信息),在生成这个申请的时候,同时也会生成一个私钥,私钥要自己保管好.做过iOS APP的朋友都应该知道是怎么向苹果申请开发者证书的吧.
查看的办法:openssl req -noout -text -in my.csr (如果是DER格式的话照旧加上-inform der,这里不写了)

PFX/P12 - predecessor of PKCS#12,包含公钥和私钥的二进制格式证书

       对nginx服务器来说,一般CRT和KEY是分开存放在不同文件中的,但Windows的IIS则将它们存在一个PFX文件中,(因此这个文件包含了证书及私钥)这样会不会不安全？应该不会,PFX通常会有一个"提取密码",你想把里面的东西读取出来的话,它就要求你提供提取密码,PFX使用的时DER编码,如何把PFX转换为PEM编码？
openssl pkcs12 -in for-iis.pfx -out for-iis.pem -nodes
这个时候会提示你输入提取代码. for-iis.pem就是可读的文本.
生成pfx的命令类似这样:openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out certificate.pfx

其中CACert.crt是CA(权威证书颁发机构)的根证书,有的话也通过-certfile参数一起带进去.这么看来,PFX其实是个证书密钥库.

p7b - 以树状展示证书链(certificate chain)，同时也支持单个证书，不含私钥。

JKS - 即Java Key Storage,这是Java的专利,跟OpenSSL关系不大,利用Java的一个叫"keytool"的工具,可以将PFX转为JKS,当然了,keytool也能直接生成JKS,不过在此就不多表了.



备注实例：

1、从pfx导出crt和key:

操作命令：
openssl pkcs12 -in example.cn.ssl.pfx -nocerts -nodes -out example.key
openssl pkcs12 -in example.cn.ssl.pfx -clcerts -nokeys -out example.crt

2、将crt和key合并出pfx:

操作命令：

openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out certificate.pfx

* 证书：.crt, .pem
* 私钥：.key
* 
p12文件中导出公钥和私钥
```
//1.生成1.key文件
openssl pkcs12 -in apple_payment.p12 -nocerts -nodes -out 1.key
//2.导出私钥
openssl rsa -in 1.key -out apple_pay_pri.pem
writing RSA key
//3.导出公钥
openssl rsa -in 1.key -pubout -out apple_pay_pub.pem
```
